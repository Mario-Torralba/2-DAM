*********************************************************
*************         EJERCICIO 1         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_1 AS
	CURSOR v_cursor IS
		SELECT * FROM EMPLE
		ORDER BY APELLIDO;
	v_emple EMPLE%ROWTYPE;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_emple;
		WHILE v_cursor %FOUND LOOP
			DBMS_OUTPUT.PUT_LINE('Empleado con apellido '|| v_emple.APELLIDO ||' y fecha de alta '||v_emple.FECHA_ALT);
			FETCH v_cursor INTO v_emple;
		END LOOP;
END;
/

CALL EJERCICIO_1();


*********************************************************
*************         EJERCICIO 2         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_2 AS
	CURSOR v_cursor IS
		SELECT D.DNOMBRE,COUNT(D.DEPT_NO) AS EMPLEADOS 
		FROM DEPART D
		INNER JOIN EMPLE E 
		ON D.DEPT_NO = E.DEPT_NO
		GROUP BY D.DNOMBRE;
	v_dnombre DEPART.DNOMBRE%TYPE;
	v_cantidad NUMBER;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_dnombre,v_cantidad;
		WHILE v_cursor %FOUND LOOP
			DBMS_OUTPUT.PUT_LINE('El departamento de '|| v_dnombre ||' tiene '|| v_cantidad || ' empleados');
			FETCH v_cursor INTO v_dnombre,v_cantidad;
		END LOOP;
END;
/

CALL EJERCICIO_2();

*********************************************************
*************         EJERCICIO 3         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_3 AS
	CURSOR v_cursor IS
		SELECT * FROM EMPLE
		ORDER BY SALARIO DESC
		FETCH FIRST 5 ROWS ONLY;
	v_emple EMPLE%ROWTYPE;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_emple;
		WHILE v_cursor %FOUND LOOP
			DBMS_OUTPUT.PUT_LINE('El empleado con apellido '|| v_emple.APELLIDO ||' cobra '|| v_emple.SALARIO || ' soles');
			FETCH v_cursor INTO v_emple;
		END LOOP;
END;
/

CALL EJERCICIO_3();

*********************************************************
*************         EJERCICIO 4         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_4 AS
	CURSOR v_cursor1 IS
		SELECT OFICIO FROM EMPLE
		GROUP BY OFICIO;
	v_oficio EMPLE.OFICIO%TYPE;
	CURSOR v_cursor2 IS
		SELECT OFICIO, SALARIO FROM EMPLE
		WHERE OFICIO = v_oficio
		ORDER BY SALARIO ASC
		FETCH FIRST 2 ROWS ONLY;
	v_oficio2 EMPLE.OFICIO%TYPE;
	v_salario EMPLE.SALARIO%TYPE;
BEGIN
	OPEN v_cursor1;
		FETCH v_cursor1 INTO v_oficio;
		WHILE v_cursor1 %FOUND LOOP
			OPEN v_cursor2;
				FETCH v_cursor2 INTO v_oficio2, v_salario;
				WHILE v_cursor2 %FOUND LOOP
					DBMS_OUTPUT.PUT_LINE('El oficio de '|| v_oficio2 ||' tiene el salario de '|| v_salario);
					FETCH v_cursor2 INTO v_oficio2, v_salario;
				END LOOP;
				CLOSE v_cursor2;
			FETCH v_cursor1 INTO v_oficio;
		END LOOP;
		CLOSE v_cursor1;
END;
/

CALL EJERCICIO_4();


*********************************************************
*************         EJERCICIO 5         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_5(p_nombre IN VARCHAR2, p_localidad IN VARCHAR2) AS
 	v_ultimo_numero NUMBER;
 	v_nuevo_numero NUMBER;
 	sin_departamentos EXCEPTION;
BEGIN
 	SELECT MAX(DEPT_NO) INTO v_ultimo_numero FROM DEPART;
 	IF v_ultimo_numero IS NULL THEN
   		RAISE sin_departamentos;
 	ELSE
		v_nuevo_numero := v_ultimo_numero + 10;
 	END IF;
	INSERT INTO DEPART (DEPT_NO, DNOMBRE, LOC)
	VALUES (v_nuevo_numero, p_nombre, p_localidad);
	DBMS_OUTPUT.PUT_LINE('Departamento insertado correctamente. Nuevo número de departamento: ' || v_nuevo_numero);
EXCEPTION
	WHEN sin_departamentos THEN
		DBMS_OUTPUT.PUT_LINE('No existen departamentos, imposible sumar 10 a NULL' );
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('Error al insertar el departamento: ' || p_nombre);
END EJERCICIO_5;
/


CALL EJERCICIO_5('TRAZABILIDAD','ROMA');


*********************************************************
*************         EJERCICIO 6         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_6(p_numero_departamento IN NUMBER, p_importe IN NUMBER, p_porcentaje IN NUMBER) AS
	CURSOR v_cursor IS
		SELECT * FROM EMPLE
		WHERE DEPT_NO = p_numero_departamento;
 	v_emple EMPLE%ROWTYPE;
BEGIN
OPEN v_cursor;
		FETCH v_cursor INTO v_emple;
		WHILE v_cursor %FOUND LOOP
			IF (v_emple.SALARIO + p_importe) > (v_emple.SALARIO * (1+(p_porcentaje/100)))
				DBMS_OUTPUT.PUT_LINE('El empleado '|| v_emple.APELLIDO ||' se le sube el sueldo '|| p_importe ||' € por importe');
				EXEC INMEDIATE UPDATE DEPART SET SALARIO = (v_emple.SALARIO + p_importe);
			ELSE
				DBMS_OUTPUT.PUT_LINE('El empleado '|| v_emple.APELLIDO ||' se le sube el sueldo '|| p_importe ||' € por importe');
				EXEC INMEDIATE UPDATE DEPART SET SALARIO = (v_emple.SALARIO + p_importe);
			END IF;
			DBMS_OUTPUT.PUT_LINE('El empleado con apellido '|| v_emple.APELLIDO ||' cobra '|| v_emple.SALARIO || ' soles');
			FETCH v_cursor INTO v_emple;
		END LOOP;amente. Nuevo número de departamento: ' || v_nuevo_numero);
END EJERCICIO_6;
/


CALL EJERCICIO_6(10,100,10);