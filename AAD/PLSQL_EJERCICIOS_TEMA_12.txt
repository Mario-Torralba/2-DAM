*********************************************************
*************         EJERCICIO 1         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_1 AS
	CURSOR v_cursor IS
		SELECT * FROM EMPLE
		ORDER BY APELLIDO;
	v_emple EMPLE%ROWTYPE;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_emple;
		WHILE v_cursor %FOUND LOOP
			DBMS_OUTPUT.PUT_LINE('Empleado con apellido '|| v_emple.APELLIDO ||' y fecha de alta '||v_emple.FECHA_ALT);
			FETCH v_cursor INTO v_emple;
		END LOOP;
END;
/

CALL EJERCICIO_1();


*********************************************************
*************         EJERCICIO 2         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_2 AS
	CURSOR v_cursor IS
		SELECT D.DNOMBRE,COUNT(D.DEPT_NO) AS EMPLEADOS 
		FROM DEPART D
		INNER JOIN EMPLE E 
		ON D.DEPT_NO = E.DEPT_NO
		GROUP BY D.DNOMBRE;
	v_dnombre DEPART.DNOMBRE%TYPE;
	v_cantidad NUMBER;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_dnombre,v_cantidad;
		WHILE v_cursor %FOUND LOOP
			DBMS_OUTPUT.PUT_LINE('El departamento de '|| v_dnombre ||' tiene '|| v_cantidad || ' empleados');
			FETCH v_cursor INTO v_dnombre,v_cantidad;
		END LOOP;
END;
/

CALL EJERCICIO_2();

*********************************************************
*************         EJERCICIO 3         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_3 AS
	CURSOR v_cursor IS
		SELECT * FROM EMPLE
		ORDER BY SALARIO DESC
		FETCH FIRST 5 ROWS ONLY;
	v_emple EMPLE%ROWTYPE;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_emple;
		WHILE v_cursor %FOUND LOOP
			DBMS_OUTPUT.PUT_LINE('El empleado con apellido '|| v_emple.APELLIDO ||' cobra '|| v_emple.SALARIO || ' soles');
			FETCH v_cursor INTO v_emple;
		END LOOP;
END;
/

CALL EJERCICIO_3();

*********************************************************
*************         EJERCICIO 4         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_4 AS
	CURSOR v_cursor1 IS
		SELECT OFICIO FROM EMPLE
		GROUP BY OFICIO;
	v_oficio EMPLE.OFICIO%TYPE;
	CURSOR v_cursor2 IS
		SELECT OFICIO, SALARIO FROM EMPLE
		WHERE OFICIO = v_oficio
		ORDER BY SALARIO ASC
		FETCH FIRST 2 ROWS ONLY;
	v_oficio2 EMPLE.OFICIO%TYPE;
	v_salario EMPLE.SALARIO%TYPE;
BEGIN
	OPEN v_cursor1;
		FETCH v_cursor1 INTO v_oficio;
		WHILE v_cursor1 %FOUND LOOP
			OPEN v_cursor2;
				FETCH v_cursor2 INTO v_oficio2, v_salario;
				WHILE v_cursor2 %FOUND LOOP
					DBMS_OUTPUT.PUT_LINE('El oficio de '|| v_oficio2 ||' tiene el salario de '|| v_salario);
					FETCH v_cursor2 INTO v_oficio2, v_salario;
				END LOOP;
				CLOSE v_cursor2;
			FETCH v_cursor1 INTO v_oficio;
		END LOOP;
		CLOSE v_cursor1;
END;
/

CALL EJERCICIO_4();


*********************************************************
*************         EJERCICIO 5         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_5(p_nombre IN VARCHAR2, p_localidad IN VARCHAR2) AS
 	v_ultimo_numero NUMBER;
 	v_nuevo_numero NUMBER;
 	sin_departamentos EXCEPTION;
BEGIN
 	SELECT MAX(DEPT_NO) INTO v_ultimo_numero FROM DEPART;
 	IF v_ultimo_numero IS NULL THEN
   		RAISE sin_departamentos;
 	ELSE
		v_nuevo_numero := v_ultimo_numero + 10;
 	END IF;
	INSERT INTO DEPART (DEPT_NO, DNOMBRE, LOC)
	VALUES (v_nuevo_numero, p_nombre, p_localidad);
	DBMS_OUTPUT.PUT_LINE('Departamento insertado correctamente. Nuevo número de departamento: ' || v_nuevo_numero);
EXCEPTION
	WHEN sin_departamentos THEN
		DBMS_OUTPUT.PUT_LINE('No existen departamentos, imposible sumar 10 a NULL' );
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('Error al insertar el departamento: ' || p_nombre);
END EJERCICIO_5;
/


CALL EJERCICIO_5('TRAZABILIDAD','ROMA');


*********************************************************
*************         EJERCICIO 6         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_6(p_numero_departamento IN NUMBER, p_importe IN NUMBER, p_porcentaje IN NUMBER) AS
	CURSOR v_cursor IS
		SELECT * FROM EMPLE
		WHERE DEPT_NO = p_numero_departamento;
 	v_emple EMPLE%ROWTYPE;
BEGIN
	OPEN v_cursor;
		FETCH v_cursor INTO v_emple;
		WHILE v_cursor %FOUND LOOP
			IF (v_emple.SALARIO + p_importe) > (v_emple.SALARIO * (1+(p_porcentaje/100))) THEN
				DBMS_OUTPUT.PUT_LINE('El empleado '|| v_emple.APELLIDO ||' se le sube el sueldo '|| p_importe ||' € por importe');
				EXECUTE IMMEDIATE 'UPDATE EMPLE SET SALARIO = (v_emple.SALARIO + p_importe) WHERE EMP_NO = v_emple.EMP_NO';
			ELSE
				DBMS_OUTPUT.PUT_LINE('El empleado '|| v_emple.APELLIDO ||' se le sube el sueldo '|| p_porcentaje ||' € por porcentaje');
				EXECUTE IMMEDIATE 'UPDATE EMPLE SET SALARIO = (v_emple.SALARIO * (1+(p_porcentaje/100))) WHERE EMP_NO = v_emple.EMP_NO';
			END IF;
			FETCH v_cursor INTO v_emple;
		END LOOP;
END EJERCICIO_6;
/


CALL EJERCICIO_6(10,100,10);

*********************************************************
*************         EJERCICIO 7         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_7_1(v_dep_no IN NUMBER) AS
	v_dep_avg_sal NUMBER;
	v_c1_row EMPLE%ROWTYPE;
	CURSOR C1 IS
		SELECT * FROM EMPLE WHERE DEPT_NO = v_dep_no;
	v_diff NUMBER;
	v_sal_nuevo NUMBER;
BEGIN
	DBMS_OUTPUT.PUT_LINE('Entrando en subir_sueldo_emp');
	OPEN C1;
	SELECT ROUND(AVG(SALARIO)) INTO v_dep_avg_sal FROM EMPLE WHERE DEPT_NO = v_dep_no;
	FETCH C1 INTO v_c1_row;
	WHILE C1%FOUND LOOP
		v_diff := v_c1_row.SALARIO - v_dep_avg_sal;
		v_sal_nuevo := ROUND(v_c1_row.SALARIO + (v_diff * 0.5));
		DBMS_OUTPUT.PUT_LINE('Salario medio: '||v_dep_avg_sal);
		DBMS_OUTPUT.PUT_LINE('Salario anterior: '||v_c1_row.SALARIO);
		DBMS_OUTPUT.PUT_LINE('Salario nuevo: '||v_sal_nuevo);
		UPDATE EMPLE SET SALARIO = 1000 WHERE EMP_NO = v_c1_row.EMP_NO;
	        FETCH C1 INTO v_c1_row;
	END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE EJERCICIO_7_2 AS
	v_avg_sueldo NUMBER;
	v_dept_no NUMBER;
	CURSOR C1 IS
		SELECT DISTINCT DEPT_NO FROM EMPLE;
BEGIN
	OPEN C1;
	FETCH C1 INTO v_dept_no;
	WHILE C1%FOUND LOOP
		subir_sueldo_emp(v_dept_no);
		FETCH C1 INTO v_dept_no;
		UPDATE EMPLE e
		SET e.SALARIO = e.SALARIO + (0.5 * (SELECT AVG(SALARIO) FROM EMP WHERE DEPT_NO = C1.DEPT_NO))
		WHERE e.DEPT_NO = C1.DEPT_NO;
	END LOOP;
END;
/

CALL EJERCICIO_7_2();

*********************************************************
*************         EJERCICIO 8         ***************
*********************************************************

CREATE OR REPLACE PROCEDURE EJERCICIO_8 AS
	CURSOR C1 IS
		SELECT * FROM EMPLE;
	v_emp_datos EMPLE%ROWTYPE;
	v_comision NUMBER := 0;
	v_comision_resp NUMBER := 0;
	v_trienios NUMBER;
BEGIN
	OPEN C1;
	FETCH C1 INTO v_emp_datos;
	WHILE C1%FOUND LOOP
		v_trienios := (ABS(MONTHS_BETWEEN(v_emp_datos.FECHA_ALT, CURRENT_DATE) / 12)) * 50;
		DBMS_OUTPUT.PUT_LINE('Empleado: '||v_emp_datos.APELLIDO);
		DBMS_OUTPUT.PUT_LINE('Dpto: '||v_emp_datos.DEPT_NO);
		DBMS_OUTPUT.PUT_LINE('Oficio: '||v_emp_datos.OFICIO);
		DBMS_OUTPUT.PUT_LINE('Salario: '||v_emp_datos.SALARIO);
		DBMS_OUTPUT.PUT_LINE('Trienio: '||v_trienios);
		DBMS_OUTPUT.PUT_LINE('Comp. responsabilidad: '||v_comision_resp);
		DBMS_OUTPUT.PUT_LINE('Comisión: '||v_comision);
		FETCH C1 INTO v_emp_datos;
        END LOOP;
END;
/

CALL EJERCICIO_8();


*********************************************************
*************         EJERCICIO 9         ***************
*********************************************************


CREATE TABLE EJ9 (APELLIDOS VARCHAR2(100), DEPTO NUMBER, OFICIO VARCHAR2(100), SALARIO NUMBER, TRIENIO NUMBER);

CREATE OR REPLACE PROCEDURE EJERCICIO_9 AS
	CURSOR C1 IS
        	SELECT * FROM EMPLE;
	v_emp_datos EMPLE%ROWTYPE;
	v_comision NUMBER := 0;
	v_comision_resp NUMBER := 0;
	v_trienios NUMBER;
BEGIN
	OPEN C1;
	FETCH C1 INTO v_emp_datos;
	SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = upper('EJ9');
	IF v_count = 0 THEN
		EXECUTE IMMEDIATE 'CREATE TABLE EJ9 (APELLIDOS VARCHAR2(100), DEPTO NUMBER, OFICIO VARCHAR2(100), SALARIO NUMBER, TRIENIO NUMBER)';
		DBMS_OUTPUT.PUT_LINE('Tabla EJ9 creada.');
	ELSE
        	EXECUTE IMMEDIATE 'DELETE from EMP_ERRORS';
        	DBMS_OUTPUT.PUT_LINE('Tabla EJ9 ya existe.');
	END IF;
	WHILE C1%FOUND LOOP
		v_trienios := (ABS(MONTHS_BETWEEN(v_emp_datos.FECHA_ALT, CURRENT_DATE) / 12)) * 50;
		INSERT INTO EJ9 VALUES (v_emp_datos.APELLIDOS, v_emp_datos.DEPTO, v_emp_datos.OFICIO, v_emp_datos.SALARIO, v_trienios);
		FETCH C1 INTO v_emp_datos;
        END LOOP;
END;
/

CALL EJERCICIO_9();


*********************************************************
*************         EJERCICIO 10         ***************
*********************************************************


CREATE OR REPLACE PROCEDURE EJERCICIO_10 AS
	pedido_no NUMBER(10) := 100;
	producto_no NUMBER(10) := 23;
	cliente_no NUMBER(10) := 2;
	unidades NUMBER(10) := 10;
	fecha_pedido DATE := 10/10/2022;
	precio NUMBER;
BEGIN
	SELECT PRECIO INTO precio FROM PRODUCTOS08.PRECIO_ACTUAL;
	IF(cliente_credito_suficiente(cliente_no, unidades*precio)) THEN
        	return;
	END IF;
	BEGIN
		insertar_pedido(pedido_no, producto_no, cliente_no, unidades, fecha_pedido);
		actualizar_deuda_cliente(cliente_no, unidades * precio(producto_no));
		actualizar_unidades_producto(producto_no, unidades);
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
	END;
	DBMS_OUTPUT.PUT_LINE('Pedido introducido correctamente.');
END;

CREATE OR REPLACE FUNCTION cliente_credito_suficiente(cliente_no NUMBER, importe NUMBER) RETURN BOOLEAN IS
	v_saldo NUMBER;
BEGIN
	select LIMITE_CREDITO INTO v_saldo FROM CLIENTES0808 WHERE CLIENTE_NO = cliente_no;
	if((v_saldo - importe) < 0) THEN
        	DBMS_OUTPUT.PUT_LINE('El cliente no tiene saldo suficiente');
        	RETURN FALSE;
	END IF;
	RETURN TRUE;
END;

CREATE OR REPLACE PROCEDURE insertar_pedido(pedido_no NUMBER, producto_no NUMBER, cliente_no NUMBER, unidades NUMBER, fecha_pedido DATE) IS
BEGIN
	INSERT INTO PEDIDOS08 (pedido_no, producto_no, cliente_no, unidades, fecha_pedido)
	VALUES (pedido_no, producto_no, cliente_no, unidades, fecha_pedido);
END;

CREATE OR REPLACE PROCEDURE actualizar_deuda_cliente(cliente_no NUMBER, importe NUMBER) IS
BEGIN
	UPDATE CLIENTES08
	SET deuda = deuda + importe
	WHERE cliente_no = cliente_no;
END;


CREATE OR REPLACE PROCEDURE actualizar_unidades_producto(producto_no NUMBER, unidades NUMBER) IS
BEGIN
	UPDATE PRODUCTOS08
	SET unidades = unidades - unidades
	WHERE producto_no = producto_no;
END;
/